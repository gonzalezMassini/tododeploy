{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","event","target","handleSubmit","preventDefault","onSubmit","id","shortid","generate","text","className","type","placeholder","onChange","name","ref","onClick","autoComplete","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","style","textDecoration","TodoList","setTodos","test","newTodos","filter","updatedTodos","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","backgroundImage","document","getElementById"],"mappings":"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","file":"static/js/main.459ff581.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport shortid from 'shortid';\n\nconst TodoForm = (props) => {\n  // keep updates and keep track of the state of value on the input field\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = (event) => {\n    setInput(event.target.value);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.onSubmit({\n      id: shortid.generate(),\n      text: input,\n      // isComplete: false,\n    });\n    setInput('');\n  };\n  return (\n    <form className='todo-form' onSubmit={handleSubmit}>\n      {props.edit ? (\n        <>\n          <input\n            type='text'\n            placeholder='UPDATE TODO...'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            className='todo-input edit'\n            ref={inputRef}\n          />\n          <button onClick={handleSubmit} className='todo-button edit'>\n            Update\n          </button>\n        </>\n      ) : (\n        <>\n          <input\n            autoComplete='off'\n            placeholder='ENTER TODO...'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            className='todo-input'\n            ref={inputRef}\n          />\n          <button onClick={handleSubmit} className='todo-button'>\n            addTodo\n          </button>\n        </>\n      )}\n    </form>\n  );\n};\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\n\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\n  const [edit, setEdit] = useState({ id: null, value: '' });\n\n  const submitUpdate = (value) => {\n    updateTodo(edit.id, value);\n    setEdit({\n      id: null,\n      value: '',\n    });\n  };\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate}></TodoForm>;\n  }\n\n  return todos.map((todo, index) => (\n    <div\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n      key={index}\n    >\n      <span\n        key={todo.id}\n        style={\n          todo.isComplete\n            ? { textDecoration: 'line-through' }\n            : { textDecoration: '' }\n        }\n        onClick={() => completeTodo(todo.id)}\n      >\n        {todo.text}\n      </span>\n      <span className='icons'>\n        <RiCloseCircleLine\n          className='delete-icon'\n          onClick={() => removeTodo(todo.id)}\n        ></RiCloseCircleLine>\n        <TiEdit\n          className='edit-icon'\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\n        />\n      </span>\n    </div>\n  ));\n}\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\n\nconst TodoList = () => {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = (todo) => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n    const newTodos = [todo, ...todos];\n    setTodos(newTodos);\n  };\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n    setTodos((prev) =>\n      prev.map((item) => (item.id === todoId ? newValue : item))\n    );\n  };\n\n  const completeTodo = (id) => {\n    let updatedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  const removeTodo = (id) => {\n    const removeTodo = todos.filter((todo) => todo.id !== id);\n    setTodos(removeTodo);\n  };\n\n  return (\n    <>\n      <h1>Enter Todo Task</h1>\n      <TodoForm onSubmit={addTodo} todos={todos}></TodoForm>\n      <Todo\n        removeTodo={removeTodo}\n        todos={todos}\n        completeTodo={completeTodo}\n        updateTodo={updateTodo}\n      ></Todo>\n      <button className='todoClr-button' onClick={() => setTodos([])}>\n        Clear TodoList\n      </button>\n    </>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList></TodoList>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import background from '/home/jose/Documents/progProjects/newtodo/src/backgroundImg.jpg';\n\nReactDOM.render(\n  <React.StrictMode\n    style={{\n      // backgroundImage: `url(${background})`,\n      backgroundImage: `url({./backgoundImg})`,\n    }}\n  >\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}